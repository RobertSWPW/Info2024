@using System.Reflection
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@model Info2024.Models.Opinion

<div class="row interspace">
	<form asp-action="CreatePartial" asp-controller="Opinions" method="post">
		<div asp-validation-summary="ModelOnly" class="text-danger"></div>
		<input asp-for="UserId" type="hidden" />
		<input asp-for="TextId" type="hidden" />
		<div class="form-group">
			<label asp-for="Comment" class="control-label"></label>
			<textarea asp-for="Comment" class="form-control"></textarea>
			<span asp-validation-for="Comment" class="text-danger"></span>
		</div>
		@if (User.FindFirstValue(ClaimTypes.NameIdentifier) != Model.Text.UserId)
		{
			<div class="form-group">
				<label asp-for="Rating" class="control-label"></label>
				<div class="rating-selector" data-rating-target="Rating">
					<input type="hidden" id="Rating" name="Rating" value="" />
					<div class="stars">
						<i class="bi bi-star text-warning" data-rating="1"></i>
						<i class="bi bi-star text-warning" data-rating="2"></i>
						<i class="bi bi-star text-warning" data-rating="3"></i>
						<i class="bi bi-star text-warning" data-rating="4"></i>
						<i class="bi bi-star text-warning" data-rating="5"></i>
					</div>
				</div>

				<span asp-validation-for="Rating" class="text-danger"></span>
			</div>
		}
		<div class="modal-footer">
			<div class="form-group">
				<input type="submit" value="Zapisz ocenę" class="btn btn-primary" />
				<button type="button" data-bs-dismiss="modal" class="btn btn-light">Powrót do tekstu</button>
			</div>
		</div>
	</form>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
      const ratingSelectors = document.querySelectorAll('.rating-selector');

      ratingSelectors.forEach(selector => {
          const stars = selector.querySelectorAll('.stars i');
          const targetInputId = selector.dataset.ratingTarget;
          const targetInput = document.getElementById(targetInputId);

          stars.forEach(star => {
              star.addEventListener('mouseenter', () => {
                  const rating = parseInt(star.dataset.rating);
                  updateStars(stars, rating, 'hover');
              });
          });

          selector.querySelector('.stars').addEventListener('mouseleave', () => {
              const currentRating = targetInput.value ? parseInt(targetInput.value) : null;
              updateStars(stars, currentRating, 'selected');
          });

          stars.forEach(star => {
              star.addEventListener('click', () => {
                  const rating = parseInt(star.dataset.rating);
                  targetInput.value = rating;
                  updateStars(stars, rating, 'selected');
              });
          });
      });

      function updateStars(stars, rating, state) {
          stars.forEach(star => {
              const starRating = parseInt(star.dataset.rating);
              if (rating && starRating <= rating) {
                  star.classList.remove('bi-star');
                  star.classList.add('bi-star-fill');
              } else {
                  star.classList.remove('bi-star-fill');
                  star.classList.add('bi-star');
              }
          });
      }
  });
</script>