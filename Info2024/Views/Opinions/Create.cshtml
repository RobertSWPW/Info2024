@using System.Reflection
@using System.ComponentModel.DataAnnotations
@model Info2024.Models.Opinion

@{
	ViewData["Title"] = "Dodawanie komentarza";
}

<h1 class=" text-primary">Dodawanie komentrza do tekstu</h1>

<h4 class="text-success">@ViewData["TextTitle"]</h4>
<hr />
<div class="row">
	<div class="col-md-6 interspace">
		<form asp-action="Create">
			<div asp-validation-summary="ModelOnly" class="text-danger"></div>
			<input asp-for="UserId" type="hidden" />
			<input asp-for="TextId" type="hidden" />
			<div class="form-group">
				<label asp-for="Comment" class="control-label"></label>
				<textarea asp-for="Comment" class="form-control"></textarea>
				<span asp-validation-for="Comment" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label asp-for="Rating" class="control-label"></label>
				<select asp-for="Rating" class="form-control">
					<option value="">--- Wybierz ocenę ---</option>
					@foreach (Rating rating in Enum.GetValues(typeof(Rating)))
					{
						if ((int)rating != 0) 
						{
							<option value="@((int)rating)">
								@(rating.GetType().GetField(rating.ToString()).GetCustomAttribute<DisplayAttribute>().Name)
							</option>
						}
					}
				</select>
				<span asp-validation-for="Rating" class="text-danger"></span>
			</div>

			<div class="form-group">
				<input type="submit" value="Zapisz ocenę" class="btn btn-primary" />
				<a asp-controller="Texts" asp-action="Details" asp-route-id=@Model.TextId class="btn btn-light"> Powrót do tekstu</a>
			</div>
		</form>
	</div>
</div>

@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}
}
